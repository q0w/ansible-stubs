from collections.abc import Iterable
from typing import overload

from typing_extensions import SupportsIndex

class AnsibleFallbackNotFound(Exception): ...

class AnsibleValidationError(Exception):
    error_message: str
    def __init__(self, message: str) -> None: ...
    @property
    def msg(self) -> str: ...

class AnsibleValidationErrorMultiple(AnsibleValidationError):
    errors: list[AnsibleValidationError]
    def __init__(self, errors: list[AnsibleValidationError] | None = ...) -> None: ...
    @overload
    def __getitem__(self, __i: SupportsIndex) -> AnsibleValidationError: ...
    @overload
    def __getitem__(self, __s: slice) -> list[AnsibleValidationError]: ...
    @overload
    def __setitem__(self, __i: SupportsIndex, __x: AnsibleValidationError) -> None: ...
    @overload
    def __setitem__(self, __s: slice, __x: Iterable[AnsibleValidationError]) -> None: ...
    def __delitem__(self, __i: SupportsIndex | slice) -> None: ...
    @property
    def msg(self) -> str: ...
    @property
    def messages(self) -> list[str]: ...
    def append(self, error: AnsibleValidationError) -> None: ...
    def extend(self, errors: Iterable[AnsibleValidationError]) -> None: ...

class AliasError(AnsibleValidationError): ...
class ArgumentTypeError(AnsibleValidationError): ...
class ArgumentValueError(AnsibleValidationError): ...
class ElementError(AnsibleValidationError): ...
class MutuallyExclusiveError(AnsibleValidationError): ...
class NoLogError(AnsibleValidationError): ...
class RequiredByError(AnsibleValidationError): ...
class RequiredDefaultError(AnsibleValidationError): ...
class RequiredError(AnsibleValidationError): ...
class RequiredIfError(AnsibleValidationError): ...
class RequiredOneOfError(AnsibleValidationError): ...
class RequiredTogetherError(AnsibleValidationError): ...
class SubParameterTypeError(AnsibleValidationError): ...
class UnsupportedError(AnsibleValidationError): ...
